import java.util.*;

interface AnonClass {
    
	public void anonMethod();
	
}

interface LambdaExercise {
	
    void lambdaMethod (ArrayList<String> a);
    
}

interface RefExercise {
	
    void refMethod (ArrayList<String> a);
    
}

class Ope{
	
	static void sortAlf(ArrayList<String> a) {
		Collections.sort(a);
	}
	
	static void sortLon(ArrayList<String> a) {
		Collections.sort(a, new LengthCom());
	}
	
}

class LengthCom implements Comparator<String>{
	
	public int compare (String s1, String s2) {
		
		int l1 = s1.length();
		int l2 = s2.length();
		
		return l1 - l2;
		
	}
	
}

//Clase principal Actividad13
public class Actividad13 {

	//Arreglo Cadenas
	ArrayList<String> Cadenas = new ArrayList<String>();
	
	public static void main(String[] args) {
	
		Actividad13 obj = new Actividad13();
		obj.llenar();
		obj.sortMetodo();

	}

	public void llenar() {
		
		Cadenas.add("Flores");
		Cadenas.add("Chocolates");
		Cadenas.add("Tortuga");
		Cadenas.add("Television");
		Cadenas.add("Arbol");
		Cadenas.add("Cielo");
		Cadenas.add("Familia");
		Cadenas.add("Invierno");
		Cadenas.add("Diciembre");
		Cadenas.add("Musica");
		
	}
	
	public void sortMetodo() {
		
		System.out.println("CLASE ANONIMA \n");
		
		AnonClass anon = new AnonClass() {
            
		public void anonMethod() {
			
			System.out.println("Orden alfabetico \n");
			
			// Sort Cadenas
			Collections.sort(Cadenas);  
			
			for (String i : Cadenas) {
				
				System.out.println(i);

			}
				
            }
			
        };

        anon.anonMethod();
        
        AnonClass anon2 = new AnonClass() {
        
        public void anonMethod() {
						
			System.out.println("\nOrden por longitud \n");
			
			Collections.sort(Cadenas, new LengthCom());
			
			for (String i : Cadenas) {
				
				System.out.println(i);

			}
							
            }
			
        };

        anon2.anonMethod();

		System.out.println("\nLAMBDA \n");
		
		System.out.println("Orden alfabetico \n");
		
        LambdaExercise alf = (a) -> Collections.sort(a);
        
        alf.lambdaMethod(Cadenas);
        
        for (String i : Cadenas) {
			
			System.out.println(i);

		}
        
        System.out.println("\nOrden por longitud \n");
		
        LambdaExercise longitud = (a) -> Collections.sort(a, new LengthCom());
        
        longitud.lambdaMethod(Cadenas);
        
        for (String i : Cadenas) {
			
			System.out.println(i);

		}
		
		System.out.println("\nMETODO DE REFERENCIA \n");
		
		System.out.println("Orden alfabetico \n");
		
        RefExercise alfref = Ope::sortAlf;
        
        alfref.refMethod(Cadenas);
        
        for (String i : Cadenas) {
			
			System.out.println(i);

		}
        
        System.out.println("\nOrden por longitud \n");
        
        RefExercise longitudref = Ope::sortLon;
        
        longitudref.refMethod(Cadenas);
        
        for (String i : Cadenas) {
			
			System.out.println(i);

		}
		
	}
	
}
